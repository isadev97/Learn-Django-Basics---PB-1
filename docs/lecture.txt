

rds        pythonic / django
tables       models
columns        fields
https://docs.djangoproject.com/en/4.2/topics/db/models/
https://docs.djangoproject.com/en/4.2/ref/models/fields/#model-field-types
https://docs.djangoproject.com/en/4.2/ref/models/fields/
python3 manage.py showmigrations
python3 manage.py makemigrations
python3 manage.py migrate 
python3 manage.py migrate <app_name>
optionally you can give app name in above commands
https://pypi.org/project/djongo/
https://faker.readthedocs.io/en/master/
class Meta:
        db_table="person"
https://faker.readthedocs.io/en/master/
>>> from my_app2.models import Person
>>> qs = Person.objects.all()
>>> qs
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>, <Person: Person object (3)>, <Person: Person object (4)>, <Person: Person object (5)>, <Person: Person object (6)>, <Person: Person object (7)>, <Person: Person object (8)>, <Person: Person object (9)>, <Person: Person object (10)>, <Person: Person object (11)>, <Person: Person object (12)>, <Person: Person object (13)>, <Person: Person object (14)>, <Person: Person object (15)>, <Person: Person object (16)>, <Person: Person object (17)>, <Person: Person object (18)>, <Person: Person object (19)>, <Person: Person object (20)>, '...(remaining elements truncated)...']>
>>> print(qs.query)
SELECT "my_app2_person"."id", "my_app2_person"."fname", "my_app2_person"."lname", "my_app2_person"."age", "my_app2_person"."email", "my_app2_person"."gender" FROM "my_app2_person"
>>> Person.objects.get(id=2)
<Person: Person object (2)>
>>> x = Person.objects.get(id=2)
>>> x.__dict__
{'_state': <django.db.models.base.ModelState object at 0x7fd0555de070>, 'id': 2, 'fname': 'Deanna', 'lname': 'Hayes', 'age': 23, 'email': 'marymcclain@example.com', 'gender': 'F'}
>>> x
<Person: Person object (2)>
>>> x.fname
'Deanna'
>>> x.lname
'Hayes'
>>> x.__dict__
{'_state': <django.db.models.base.ModelState object at 0x7fd0555de070>, 'id': 2, 'fname': 'Deanna', 'lname': 'Hayes', 'age': 23, 'email': 'marymcclain@example.com', 'gender': 'F'}
>>> y = Person.objects.filter(age__gte=80)
>>> y
<QuerySet [<Person: Person object (14)>, <Person: Person object (18)>, <Person: Person object (21)>, <Person: Person object (27)>, <Person: Person object (28)>, <Person: Person object (39)>, <Person: Person object (44)>, <Person: Person object (46)>, <Person: Person object (48)>, <Person: Person object (56)>, <Person: Person object (57)>, <Person: Person object (62)>, <Person: Person object (63)>, <Person: Person object (69)>, <Person: Person object (75)>, <Person: Person object (90)>, <Person: Person object (91)>, <Person: Person object (100)>, <Person: Person object (102)>, <Person: Person object (107)>, '...(remaining elements truncated)...']>
>>> y.count()
379
>>> print(y.query)
SELECT "my_app2_person"."id", "my_app2_person"."fname", "my_app2_person"."lname", "my_app2_person"."age", "my_app2_person"."email", "my_app2_person"."gender" FROM "my_app2_person" WHERE "my_app2_person"."age" >= 80
>>> z = Person.objects.filter(age=80)
>>> z.count()
14
>>> print(z.query)
SELECT "my_app2_person"."id", "my_app2_person"."fname", "my_app2_person"."lname", "my_app2_person"."age", "my_app2_person"."email", "my_app2_person"."gender" FROM "my_app2_person" WHERE "my_app2_person"."age" = 80

-------------------------- LECTURE 4 ------------------------



------------------- LECTURE 5 ---------------

showmigrations
makemigrations
migrate

table_name = <appname>_<model_name> django automatic convention
custom table name = class meta 

                        table_name = 
python3 manage.py showmigrations my_app2
python3 manage.py makemigrations my_app2
python3 manage.py migrate my_app2


souce env_name/Scripts/activate
source env_name/bin/activate


from django.db import models


class Student(models.Model):
    FRESHMAN = "FR"
    SOPHOMORE = "SO"
    JUNIOR = "JR"
    SENIOR = "SR"
    GRADUATE = "GR"
    YEAR_IN_SCHOOL_CHOICES = [
        (FRESHMAN, "Freshman"),
        (SOPHOMORE, "Sophomore"),
        (JUNIOR, "Junior"),
        (SENIOR, "Senior"),
        (GRADUATE, "Graduate"),
    ]
    year_in_school = models.CharField(
        max_length=2,
        choices=YEAR_IN_SCHOOL_CHOICES,
        default=FRESHMAN,
    )

    def is_upperclass(self):
        return self.year_in_school in {self.JUNIOR, self.SENIOR}

pip install django-model-utils

python3 manage.py showmigrations my_app_name


001
002
003
004
005

python3 manage.py migrate my_app_name 002
003 - rolled back
004 - rolled back
005 - rolled back

python3 manage.py runserver
http://localhost:8000/
http://localhost:8000/admin/login/?next=/admin/
python manage.py createsuperuser
http://localhost:8000/admin/


------ LECTURE 6 ---------


https://github.com/isadev97/Django-Passwordkeeper


DJANGO WITH TEMPLATES
SINGLE SERVER - FRONTEND AND BACKEND 
HTML PAGES
MONOLITHIC 

git rm -r --cached .
git add .
git commit -m ".gitignore is now working"

DJANGO REST FRAMEWORK
BACKEND - DJANGO REST FRAMEWORK (JSON RESPONSE)
FRONTEND - IOS / ANDROID / REACT / ANGULAR / HTML PAGES
2 servers
MICROSERVICES

https://www.w3schools.com/django/ref_tags_extends.php